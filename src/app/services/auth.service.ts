import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser } from '@angular/common';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:5169/api/Users';
  private tokenKey = 'auth-token';
  private userKey = 'user-info';

  private userSubject = new BehaviorSubject<any>(this.getUserFromLocalStorage());
  user$ = this.userSubject.asObservable();

  constructor(private http: HttpClient, @Inject(PLATFORM_ID) private platformId: Object) {
    if (isPlatformBrowser(this.platformId)) {
      this.updateUser(); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    }
  }

  private getUserFromLocalStorage(): any {
    if (isPlatformBrowser(this.platformId)) {
      const user = localStorage.getItem(this.userKey);
      console.log("üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:", user);
      return user ? JSON.parse(user) : {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ null
    }
    return {}; // –í —Å–ª—É—á–∞–µ SSR (–µ—Å–ª–∏ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  }

  updateUser() {
    if (isPlatformBrowser(this.platformId)) {
      const user = this.getUserFromLocalStorage();
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ:", user);
      this.userSubject.next(user || {}); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }
  }

  getUserRole(): string {
    if (!isPlatformBrowser(this.platformId)) {
      return ""; // –ï—Å–ª–∏ –Ω–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    }

    const token = localStorage.getItem(this.tokenKey);
    if (!token) return "";

    try {
      const tokenPayload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT
      console.log("üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", tokenPayload);
      return tokenPayload["role"] || ""; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
      return "";
    }
  }

  login(credentials: { email: string; password: string }): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(
      tap((response: any) => {
        if (isPlatformBrowser(this.platformId) && response.token) {
          localStorage.setItem(this.tokenKey, response.token);
          localStorage.setItem(this.userKey, JSON.stringify(response.user));
          console.log("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ localStorage:", response.user);
          this.updateUser();
        }
      })
    );
  }

  logout(): void {
    if (isPlatformBrowser(this.platformId)) {
      localStorage.removeItem(this.tokenKey);
      localStorage.removeItem(this.userKey);
      this.userSubject.next(null);
      console.log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    }
  }

  getToken(): string | null {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem(this.tokenKey);
    }
    return null;
  }

  getUser(): any {
    return this.getUserFromLocalStorage();
  }

  isLoggedIn(): boolean {
    if (isPlatformBrowser(this.platformId)) {
      return !!localStorage.getItem(this.tokenKey);
    }
    return false;
  }

  isAdmin(): boolean {
    return this.getUserRole() === "Admin";
  }
}
